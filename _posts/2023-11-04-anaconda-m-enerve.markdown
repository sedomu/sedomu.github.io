---
layout: post
title:  "Anaconda m'√©nerve"
date:   2023-11-04 21:30:00 +0100
last_modified_at:
#categories: python venv
author: 'sedomu'
---

## Anaconda

Anaconda, pour moi, c'√©tait une promesse de g√©rer ses environnements virtuels avec une grande dose d'abstraction: lancer, cr√©er un environnement, se laisser guider par un choix de paquets, utiles, pour d√©marrer avec du Python. Au premier abord, √ßa m'a rappel√© les premiers gestionnaires de paquets graphiques sous Ubuntu: c'est pas particuli√®rement sexy et tu ne te sens pas trop guid√©. Bon, j'ai pu faire l'installation, commencer √† utiliser `jupiterlab` et tout √ßa, tout √ßa. Mais quand je veux y revenir, j'ai bien envie de tout mettre √† jour quand je vois le nombre de paquets Updates available (l'habitude du `apt-get update|upgrade` imm√©diatement apr√®s avoir ouvert une session Linux), mais si le `root` se met bien √† jour, mon environnement de travail, non...

Et l√†, il ne d√©marre m√™me plus sur mon mac...

Je pense que j'aurai une meilleure ma√Ætrise de mes environnements et de comment √ßa marche `underneath the hood` si je g√®re moi-m√™me mes environnements virtuels et mes biblioth√®ques.

## Les mains dans le cambouis

J'ai bien vu des Youtubers utiliser des `venv`, je pense comprendre au-moins de mani√®re abstraite le principe et les avantages (je n'ai pas envie de pourrir mon mac avec des instal douteuses et concurrentes), mais... je ne sais pas comment d√©marrer. Et je ne me sens pas encore √† l'aise avec la doc Python pour ce faire.

On ne va pas faire semblant, et garder un niveau de confort digne d'un d√©butant: un morceau de cours d'[OpenClassrooms](https://openclassrooms.com/fr/courses/6951236-mettez-en-place-votre-environnement-python/7013854-decouvrez-les-environnements-virtuels){:target="_blank"} r√©pond tout √† fait √† cette probl√©matique.

C'√©tait extr√™ment clair et rapide. Facile aussi √† mettre en oeuvre. Je me ferai donc juste une cheatsheet ici.

## Python _venv_ cheatsheet

### Pr√©requis

`venv` n'est disponible qu'√† partir de la version 3.3 de Python.
`pip freeze` donne l'ensemble de la configuration.
`pip list` liste les biblioth√®ques install√©es.

### Manipuler les environnements virtuels

| Commande | Commentaires |
| -------- | ------------ |
| `python -m venv` _env_ | Cr√©e dans le r√©pertoire actuel l'environnement nomm√© _env_ |
| `source` _env/bin/activate_ | Activer l'environnement nomm√© _env (chemin relatif)_ |
| `deactivate` | D√©sactiver l'environnement actuel indiqu√© par (_env_) dans le terminal |

Supprimer un environnement virtuel en... supprimant le r√©pertoire _env_.

### Manipuler les _requirements.txt_

| Commande | Commentaires |
| -------- | ------------ |
| `pip freeze > requirements.txt` | Exporter la config dans le r√©pertoire actuel dans **requirements.txt** |
| `pip install -r requirements.txt` | Charger la config de **requirements.txt** |

## A propos d'Anaconda

Du coup, mon `pip freeze` dans l'environnement global, il ressemble √† rien aujourd'hui.

731 lignes au total avec des routes (? - plein de @) et des liens vers des fichiers `file:///`, nom d'utilisateur (surement entre autres) = cbousseau. Ca ne me pla√Æt pas beaucoup, √ßa fait n√©glig√© üòÖ

Je vais suivre la [documentation](https://docs.anaconda.com/free/anaconda/install/uninstall/){:target="_blank"} sur la d√©sinstallation.

Il y en avait partout dans les $PATH... C'est nettoy√©.

`pip` n'a plus que 11 paquets (qui doivent provenir de l'installation via homebrew?). Je laisse tout √ßa, √ßa para√Æt mieux.